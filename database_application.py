# import pre-existing function calls from database_queries
from database_queries import open_connection
from database_queries import close_connection
from database_queries import fetch_flights
from database_queries import fetch_pilots
from database_queries import fetch_destinations
from database_queries import modify_schedule
from database_queries import modify_destination
from database_queries import assign_pilot
# import the sqlite3 package
import sqlite3
# import the ability to show users tables in an easy to view table
from tabulate import tabulate
# import the ability to check datetime input fields
from datetime import datetime


def quit_application():
    """ Function checks with the user that they are ready to quit, if the quit option has been entered."""
    # Boolean for a continuous loop, awaiting user input of yes or no.
    check_exiting = True
    while check_exiting:
        # Get input from the user to confirm they wish to exit. Account for users entering uppercase letters.
        confirm_exit = input("Remember that unconfirmed changes will not be saved.  "
                             "Please confirm 'yes' to exit or 'no' to return to the menu. "
                             "Enter 'yes' or 'no': ").lower()
        # Cancel the quit operation if instructed to by the user.
        if confirm_exit == 'no':
            welcome_message()
            check_exiting = False
        # Complete the quit operation if instructed to by the user.
        elif confirm_exit == 'yes':
            print("Exiting. Re-run the application should you wish to access the database later.")
            exit()


def welcome_message():
    """ Function is called when the application first runs. Provides a start menu for the user to choose from.
    Calls other functions, based on the integer user input indicating what type of query they wish to complete.
    Handles a value error exception if anything other than 0-7 is entered and awaits the correct user input.
    """
    print(""" 
    Welcome! Here are your database options:
        1) Add a new flight.
        2) View flights by criteria.
        3) Update flight information.
        4) View pilot schedules.
        5) Assign a pilot to a flight.
        6) View destination information.
        7) Update destination information.
        0) Exit.

    (Note that if you exit by selecting '0' your unconfirmed changes will not be saved)
    """)

    # Try processing the user input as an integer value between 0-7.
    try:
        start_menu_choice = int(input('Which process from the above selection menu '
                                      'would you like to choose? (type a menu item '
                                      'number between 0-7 and press enter): '))

        if start_menu_choice == 1:
            add_new_flight()
        elif start_menu_choice == 2:
            view_flights_by_criteria()
        elif start_menu_choice == 3:
            update_flight_info()
        elif start_menu_choice == 4:
            view_pilot_schedules()
        elif start_menu_choice == 5:
            assign_pilot_to_flight()
        elif start_menu_choice == 6:
            view_destination_info()
        elif start_menu_choice == 7:
            update_destination_info()
        elif start_menu_choice == 0:
            quit_application()
    except ValueError:
        print("Enter a numeric value between 0 and 7: ")


def add_new_flight():
    """ Function to add a flight to the database. User must enter flight_number, departure_destination_code,
    arrival_destination_code, scheduled_departure_time, scheduled_arrival_time, departure_date and status. This
    function will create a flight route in d_flight table if it does not already exist with the specific details.
    Subsequently, the function will add the flight to the f_schedule table with autogenerated schedule_id and flight_id
     and user-defined departure_date and status.
    """
    # Create a database connection and cursor object.
    connection, cursor = open_connection()

    # Try to take user input for the flight from the user.
    try:
        flight_number = input("Enter the flight number (e.g. SI5581): ")
        departure_destination_code = input("Enter the three digit departure destination code (e.g. GCI): ")
        arrival_destination_code = input("Enter the three digit arrival destination code (e.g. JER): ")
        scheduled_departure_time = input("Enter the departure time in the format 'hh:mm' (e.g. 08:30: ")
        scheduled_arrival_time = input("Enter the arrival time in the formal 'hh:mm' (e.g. 08:50: ")
        departure_date = input("Enter the departure date in the format 'yyyy-mm-dd' (e.g. 2025-04-21: ")
        status = input("Enter the flight status (e.g. scheduled): ")

        # Execute a query for user inputted flight_number, departure and arrival destinations.
        cursor.execute('''
        SELECT * FROM d_flight 
        WHERE flight_number = ?
        AND departure_destination_code = ?
        AND arrival_destination_code = ?''', (flight_number, departure_destination_code, arrival_destination_code,))

        # As only one flight number should exist for all three attributes, fetch one result.
        existing_flight = cursor.fetchone()

        # If the flight exists, record its flight_id.
        if existing_flight:
            print("The route already exists. Continuing with adding flight to schedule.")
            flight_id = existing_flight[0]
        # If the flight doesn't exist, create it in the d_flight lookup table, using the inputted details.
        else:
            cursor.execute('''INSERT INTO d_flight (
            flight_number, departure_destination_code, arrival_destination_code, scheduled_departure_time, 
            scheduled_arrival_time
            ) VALUES   (?,?,?,?,?)''', (flight_number, departure_destination_code, arrival_destination_code,
                                        scheduled_departure_time, scheduled_arrival_time,))

            # Commit the flight route to the d_flight table.
            connection.commit()
            # Record the flight_id, for use when creating the scheduled flight.
            flight_id = cursor.lastrowid

            # Feedback to user that the route has been created.
            print("Route inserted into database.")

        #  Check the f_schedule table to see if the user inputted flight details already exist.
        cursor.execute('''
            SELECT * FROM f_schedule 
            WHERE flight_id = ?
            AND departure_date = ?''', (flight_id, departure_date))

        # As only one flight ID and departure date can exist, fetch one result from the database.
        existing_scheduled_flight = cursor.fetchone()

        # If the flight already exists, stop and inform the user.
        if existing_scheduled_flight:
            print("The flight has already been added to the schedule. No action taken as it already exists")
            return

        # If the flight does not exist in the fact table, inform the user it is being created and execute the query.
        else:
            print("Now inserting new scheduled flight")
            cursor.execute('''INSERT INTO f_schedule (departure_date, flight_ID, status)
            VALUES   (?, ?, ?)''', (departure_date, flight_id, status,))

            # commit the update to the database and inform the user.
            connection.commit()
            print("All changes committed to the database successfully.")

        # Execute a query to return the details of the new flight to the user.
        cursor.execute('''
        SELECT df.flight_id, df.flight_number, dd1.city, dd2.city, fs.departure_date, fs.status   
        FROM d_flight df
        JOIN f_schedule fs ON df.flight_ID = fs.flight_ID
        JOIN d_destination dd1 ON df.departure_destination_code = dd1.destination_code
        JOIN d_destination dd2 ON df.arrival_destination_code = dd2.destination_code
        WHERE df.flight_ID = ?
        AND fs.departure_date = ?''', (flight_id, departure_date,))

        # Fetch one result from the database as only one can exist for flight_id and departure_date.
        current_flight = cursor.fetchone()
        # Set up the headers to be able to print the table neatly.
        schedule_headers = ["Flight ID", "Flight Number", "Departure City", "Arrival City", "Departure Date",
                            "Flight Status"]
        # Print a neatly displayed table to the user, with the new flight details.
        print(tabulate([current_flight], headers=schedule_headers, tablefmt="rounded_outline"))

    # Flight ID is a primary key, return an error message if trying to create another one in the d_flight database.
    except sqlite3.IntegrityError as ie:
        if "UNIQUE constraint failed: d_flight.flight_ID" in str(ie):
            print("There has been a data integrity error (there is already a flight with that flight ID). See error "
                  "message -> ", ie)
        else:
            print("There has been an integrity error. Data entry failed. See error message -> ", ie)
            # In the case of an error, cancel the transaction.
            connection.rollback()

    # Handle incorrect values being entered by the user (as datatypes are enforced).
    except ValueError as ve:
        print("There are issues with the data values you have entered, check you are inputting accurately. Here is"
              "the error message ->", ve)

    # Catch all in case of missed exceptions.
    except Exception as exception:
        print("An error occurred, please try again, your changes have not been saved. ", exception)

    finally:
        # Safely close the connection and cursor.
        close_connection(connection, cursor)


def view_flights_by_criteria():
    """ Function presents a flight menu and allows user to view all flights or filter flights by departure_city /
    arrival_city, departure_date or flight_status.
    """
    # Provide user with the database view options for flights.
    print(""" 
        Here are your database options:
            1) View flights by departure city
            2) View flights by arrival city
            3) View flights by departure date
            4) View flights by flight status
            5) View all flights
            0) Exit.
        """)
    # Create a boolean flight_menu and start a continuous loop until an allowed option is selected.
    flight_menu = True
    while flight_menu:
        try:
            selection = int(input("Enter 1-5 based on the 5 options above or enter 0 to exit: "))
            # Use the fetch_flights function in database_queries to fetch flight information with user entered
            # filter criteria.
            if selection == 1:
                departure_city_input = input('''Which departure city would you like to view flights for? 
                (e.g. Jersey): ''')
                departure_city_input = departure_city_input.title()  # Change the input to title, to help with search.
                try:
                    fetch_flights(departure_city=departure_city_input)  # Function call for flight information.
                except ValueError as ve:
                    print("That departure city isn't on the list. Here is the error message", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":  # Change to lowercase to help users not entering information correctly.
                    flight_menu = False

            if selection == 2:
                arrival_city_input = input('''Which arrival city would you like to view flights for? (e.g. Jersey): ''')
                arrival_city_input = arrival_city_input.title()  # Help users by formatting search criteria correctly.
                try:
                    fetch_flights(arrival_city=arrival_city_input)  # Function call for flight information.
                except ValueError as ve:
                    print("That arrival city isn't on the list. Here is the error message", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":  # Change to lowercase to help users not entering information correctly.
                    flight_menu = False

            if selection == 3:
                departure_date_input = input('''Which departure date would you like to view flights for? 
                (e.g. 2025-04-21): ''')
                try:  # Try to ensure the date is entered correctly, to help with user error.
                    departure_date_input = datetime.strptime(departure_date_input, "%Y-%m-%d").date()
                except ValueError as ve:
                    print("Date input should be YYYY-MM-DD. Here is the error message-> ", ve)
                else:
                    try:
                        fetch_flights(departure_date=departure_date_input)  # Function call to fetch flight info.
                    except ValueError as ve:
                        print("That departure date isn't on the list. Here is the error message ->", ve)
                    # Provide user with the ability to return to the previous menu.
                    exit_menu = input("Type back to return to menu")
                    if exit_menu.lower() == "back":  # Change to lowercase to help users not entering info correctly.
                        flight_menu = False

            if selection == 4:
                flight_status_input = input('''Which flight status would you like to view flights for? 
                (e.g. scheduled): ''')
                flight_status_input = flight_status_input.lower()  # Change user input to lowercase to help format.
                try:
                    fetch_flights(flight_status=flight_status_input)  # Function call to fetch flight information.
                except ValueError as ve:
                    print("That flight status isn't on the list. Here is the error message->", ve)
                    # Provide user with the ability to return to the previous menu.
                    exit_menu = input("Type back to return to menu")
                    if exit_menu.lower() == "back":  # Change to lowercase to help users not entering info correctly.
                        flight_menu = False

            if selection == 5:
                print("Retrieving all flights")
                fetch_flights()  # Function call to fetch flight information for all flights.
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":  # Change to lowercase to help users not entering info correctly.
                    flight_menu = False

            if selection == 0:
                quit_application()  # Function call to allow user to quit.

        # Prompt for an appropriate entry until 0-5 is entered.
        except ValueError:
            print("Enter a numeric value between 0 and 5")


def update_flight_info():
    """ Function to allow users to update flight departure_time, arrival_time or status, using the schedule_ID."""
    # Provide user with menu to choose an option 0-3 for modifying information in the schedule fact table.
    print(""" 
        Here are your database options:
            1) Update flight actual departure time by Schedule ID
            2) Update flight actual arrival time by Schedule ID
            3) Update flight status by Schedule ID
            0) Exit.
        """)
    # Start a continuous loop, for user to enter from the above options 0-3
    updating_flight = True
    while updating_flight:
        try:
            selection = int(input("Enter 1-3 based on the 3 options above or enter 0 to exit"))
            if selection == 1:
                schedule_id_input = input('''Which schedule ID are you updating the actual departure time for? 
                (e.g. 1): ''')
                schedule_id_input = schedule_id_input.upper()  # Change input to upper to help with formatting.
                actual_departure_time_input = input("Enter the departure time in the format HH:MM (e.g. 13:50): ")
                # Call modify_schedule function with user entered details
                try:
                    modify_schedule(schedule_id=schedule_id_input, new_departure_time=actual_departure_time_input)
                except sqlite3.IntegrityError as ie:
                    if "UNIQUE constraint failed: f_schedule.schedule_ID" in str(ie):
                        print("There has been a data integrity error (you've already entered a schedule ID with that "
                              "schedule ID). Here is the error message -> ", ie)
                    else:
                        print("There has been an integrity error. Data entry failed. Here is the error message -> ", ie)
                except ValueError as ve:
                    print("There is a value error, check that you have entered the correct schedule ID and that the "
                          "departure time has been entered correctly.", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":
                    updating_flight = False

            if selection == 2:
                schedule_id_input = input(
                    '''Which schedule ID are you updating the actual arrival time for? (e.g. 1): ''')
                schedule_id_input = schedule_id_input.upper()  # Help with formatting input.
                actual_arrival_time_input = input("Enter the arrival time in the format HH:MM (e.g. 13:50): ")
                try:
                    modify_schedule(schedule_id=schedule_id_input, new_arrival_time=actual_arrival_time_input)
                except sqlite3.IntegrityError as ie:
                    if "UNIQUE constraint failed: f_schedule.schedule_ID" in str(ie):
                        print("There has been a data integrity error (you've already entered a schedule ID with that "
                              "schedule ID). Here is the error message -> ", ie)
                    else:
                        print("There has been an integrity error. Data entry failed. Here is the error message -> ", ie)
                except ValueError as ve:
                    print("There is a value error, check that you have entered the correct schedule ID and that the "
                          "arrival time has been entered correctly. Here is the error message ->", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":  # Change to lowercase to help users not entering information correctly.
                    updating_flight = False

            if selection == 3:
                schedule_id_input = input('''Which schedule ID are you updating the status for? (e.g. 1): ''')
                schedule_id_input = schedule_id_input.upper()  # Help to format user input to uppercase.
                status_input = input("Enter the status (e.g. landed): ")
                status_input = status_input.lower()  # Change to lowercase to help users not entering info correctly.
                try:
                    modify_schedule(schedule_id=schedule_id_input, new_status=status_input)
                except sqlite3.IntegrityError as ie:
                    if "UNIQUE constraint failed: f_schedule.schedule_ID" in str(ie):
                        print("There has been a data integrity error (you've already entered a schedule ID with that "
                              "schedule ID). Here is the error message -> ", ie)
                    else:
                        print("There has been an integrity error. Data entry failed. Here is the error message -> ", ie)

                except ValueError as ve:
                    print("There is a value error, check that you have entered the correct schedule ID and that status "
                          "has been entered correctly. Here is the error message ->", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":  # Change to lowercase to help users not entering information correctly.
                    updating_flight = False
            if selection == 0:
                quit_application()
        except ValueError:
            print("Enter a numeric value between 0 and 3")


def view_pilot_schedules():
    """ Function to allow user to view all pilot schedules or to view pilot schedules, filtering by pilot_id,
    first_name, or last_name
    """
    print(""" 
        Here are your database options:
            1) View pilot schedule by Pilot ID.
            2) View pilot schedules by first name (note this may fetch multiple pilots).
            3) View pilot schedules by last name (note this may fetch multiple pilots).
            4) View all pilot schedules.
            0) Exit.
        """)
    # Continuous loop to stay on the menu until an accepted option is chosen.
    viewing_pilots = True
    while viewing_pilots:
        try:
            selection = int(input("Enter 1-4 based on the 4 options above or enter 0 to exit: "))
            if selection == 1:
                pilot_id_input = input('''Which pilot ID would you like to view schedules for? (e.g. P0010001): ''')
                pilot_id_input = pilot_id_input.upper()
                try:
                    fetch_pilots(pilot_id=pilot_id_input)
                except ValueError as ve:
                    print("That pilot ID isn't on the list. Here is the error message-> ", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":
                    viewing_pilots = False

            if selection == 2:
                pilot_first_name_input = input(
                    '''Which pilot first name would you like to view schedules for? (e.g. Bhaagyashree): ''')
                pilot_first_name_input = pilot_first_name_input.title()
                try:
                    fetch_pilots(first_name=pilot_first_name_input)
                except ValueError as ve:
                    print("That pilot first name isn't on the list. Here is the error message", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":
                    viewing_pilots = False

            if selection == 3:
                pilot_last_name_input = input(
                    '''Which pilot last name would you like to view schedules for? (e.g. Patil): ''')
                pilot_last_name_input = pilot_last_name_input.title()
                try:
                    fetch_pilots(last_name=pilot_last_name_input)
                except ValueError as ve:
                    print("That pilot ID isn't on the list. Here is the error message-> ", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":
                    viewing_pilots = False

            if selection == 4:
                print("Retrieving all pilots")
                fetch_pilots()
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":
                    viewing_pilots = False

            if selection == 0:
                quit_application()

        except ValueError:
            print("Enter a numeric value between 0 and 5")


def assign_pilot_to_flight():
    """Function to assign pilot to a flight. User must enter pilot_id, flight_number, departure_date, departure_city,
    arrival_city. Calls the assign_pilot function using the user entered information.  Allocates a pilot_id to a flight.
    """
    pilot_id = input("Enter the pilot ID for the pilot you'd like to assign to a flight e.g. P0010007")
    print("Enter the flight details for the flight this pilot will be assigned to?")
    flight_number = input("Enter the flight number e.g. SI2207")
    departure_date = input("Enter the departure date e.g. 2025-04-21")
    departure_city = input("Enter the city this flight will depart from e.g. Exeter")
    arrival_city = input("Enter the city this flight will arrive at e.g. Jersey")
    assign_pilot(pilot_id, flight_number, departure_date, departure_city, arrival_city)


def view_destination_info():
    """ Function to allow user to view destination information. User can view all destination information or filter
    by destination_code, airport_name, city or country. Calls the fetch_destination function in database_queries.
    """
    print(""" 
        Here are your database options:
            1) View destination information by destination code.
            2) View destination information by airport name.
            3) View destination information by city.
            4) View destination information by country.
            5) View all destination information.
            0) Exit.
        """)

    viewing_destinations = True
    while viewing_destinations:
        try:
            selection = int(input("Enter 1-4 based on the 4 options above or enter 0 to exit"))
            if selection == 1:
                destination_code_input = input(
                    '''Which destination code would you like to view information for? (e.g. JER): ''')
                destination_code_input = destination_code_input.upper()
                try:
                    fetch_destinations(destination_code=destination_code_input)
                except ValueError as ve:
                    print("That destination code isn't on the list. Here is the error message-> ", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":
                    viewing_destinations = False

            if selection == 2:
                airport_input = input(
                    '''Which airport would you like to view information for? (e.g. Jersey Airport): ''')
                airport_input = airport_input.title()
                try:
                    fetch_destinations(airport_name=airport_input)
                except ValueError as ve:
                    print("That airport isn't on the list. Here is the error message-> ", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":
                    viewing_destinations = False

            if selection == 3:
                city_input = input('''Which city would you like to view information for? (e.g. Jersey): ''')
                city_input = city_input.title()
                try:
                    fetch_destinations(city=city_input)
                except ValueError as ve:
                    print("That city isn't on the list. Here is the error message-> ", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":
                    viewing_destinations = False

            if selection == 4:
                country_input = input('''Which country would you like to view information for? (e.g. England): ''')
                country_input = country_input.title()
                try:
                    fetch_destinations(country=country_input)
                except ValueError as ve:
                    print("That country isn't on the list. Here is the error message-> ", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":
                    viewing_destinations = False

            if selection == 5:
                print("Retrieving all destinations")
                fetch_destinations()
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":  # Change to lowercase to help users not entering information correctly.
                    viewing_destinations = False

            if selection == 0:
                quit_application()

        except ValueError:
            print("Enter a numeric value between 0 and 5")


def update_destination_info():
    """ Function to allow user to update destination information by entering a destination_code for the destination
    they would like to modify. Able to update airport_name, city, country by calling the modify_destination function.
    """
    print(""" 
        Here are your database options:
           1) Update airport name by destination code
           2) Update airport city by destination code
           3) Update airport country by destination code
           0) Exit.
        """)
    updating_destination = True
    while updating_destination:
        try:
            selection = int(input("Enter 1-3 based on the 3 options above or enter 0 to exit"))
            if selection == 1:
                destination_code_input = input(
                    '''Which destination code are you updating the airport name for? (e.g. DUB): ''')
                destination_code_input = destination_code_input.upper()
                airport_name_input = input("Enter the airport name (e.g. Dublin International: ")
                airport_name_input = airport_name_input.title()
                try:
                    modify_destination(destination_code=destination_code_input, airport_name=airport_name_input)
                except ValueError as ve:
                    print("There is a value error, check that you have entered the correct destination code and that "
                          "the airport name has been entered correctly Here is the error message", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":  # Change to lowercase to help users not entering information correctly.
                    updating_destination = False

            if selection == 2:
                destination_code_input = input(
                    '''Which destination code are you updating the airport city for? (e.g. DUB): ''')
                destination_code_input = destination_code_input.upper()
                airport_city_input = input("Enter the city name (e.g. Dublin: ")
                airport_city_input = airport_city_input.title()
                try:
                    modify_destination(destination_code=destination_code_input, city=airport_city_input)
                except ValueError as ve:
                    print("There is a value error, check that you have entered the correct destination code and that "
                          "the airport city has been entered correctly. Here is the error message-> ", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":  # Change to lowercase to help users not entering information correctly.
                    updating_destination = False

            if selection == 3:
                destination_code_input = input(
                    '''Which destination code are you updating the airport country for? (e.g. DUB): ''')
                destination_code_input = destination_code_input.upper()
                airport_country_input = input("Enter the airport country (e.g. Ireland: ")
                airport_country_input = airport_country_input.capitalize()
                try:
                    modify_destination(destination_code=destination_code_input, country=airport_country_input)
                except ValueError as ve:
                    print("There is a value error, check that you have entered the correct destination code and that "
                          "the airport country has been entered correctly. Here is the error message-> ", ve)
                # Provide user with the ability to return to the previous menu.
                exit_menu = input("Type back to return to menu")
                if exit_menu.lower() == "back":  # Change to lowercase to help users not entering information correctly.
                    updating_destination = False
            if selection == 0:
                quit_application()
        except ValueError:
            print("Enter a numeric value between 0 and 3")
